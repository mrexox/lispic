#include "keeper.h"

namespace lispic
{
     
     Repository::Repository()
     {
	  variables.push(Variables());
	  builtins["+"] = builtins["sum"] = sum;
	  builtins["set"] = set;
	  builtins["print"] = print;
	  builtins["concat"] = concat;
     }
    
     Symbol sum(Symbols& symbols)
     {
	  Number res = 0;
	  for (Symbols::const_iterator p = symbols.begin();
	       p != symbols.end();
	       ++p)
	  {
	       res += p->value().number();
	  }
	  return Symbol(std::to_string(res)).init(res);
     }
     
     Symbol print(Symbols& symbols)
     {
	  for(Symbols::iterator p = symbols.begin();
	      p != symbols.end();
	      ++p)
	  {
	       std::cout << p->value();
	       if (p + 1 != symbols.end()) std::cout << ' ';
	  }
	  return Symbol();
     }
     
     Symbol concat(Symbols& symbols)
     {
	  std::string res;
	  for (Symbols::const_iterator p = symbols.begin();
	       p != symbols.end();
	       ++p)
	  {
	       res += p->value().string();
	  }
	  return Symbol(res, Value(res));
     }
     
     Symbol def(Symbols& symbols)
     {
	  return Symbol();
     }
     
     Symbol set(Symbols& symbols)
     {
	  for (Symbols::iterator p = symbols.begin();
	       p < symbols.end();
	       p += 2)
	  {
	       variables.pop()[p->name()] = (p+1)->value();
	  }
	  return symbols.back();
     }


     Symbol lambda(Symbols& symbols)
     {
	  /*
	    UserFunction with no name
	    (lambda (arg1 arg2 ...) (body...))
	    symbols:
	      symbols - args
	      symbols - body:
	        
	   */
     }
}
