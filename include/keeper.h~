/*
  Environments are responsible for setting the symbols correct way
  Also fulfill needed symbols as needed
*/

#pragma once
#include "stdafx.h"
#include "value.h"
#include "symbol.h"
#include "environment.h"
#include "function.h"
#include "user_func.h"
#include "builtin_func.h"

namespace lispic
{
     class Keeper
     {
	  Keeper();
	  ~Keeper() {}
	  Keeper(const Keeper&) {}
	  Keeper& operator=(const Keeper&) {}
	  
	  Environment<std::string, BuiltinFunction*> builtins;
	  Environment<std::string, UserFuction*> user_defined;
	  std::stack<Envirinment<std::string, Symbol>> variables;
	  friend UserFunction;
     public:
	  static Keeper Get
	       {
		    static Keeper envs;
		    return envs;
	       }
	  
	  bool fulfill(Symbol&);
	  void set(std::string, Symbol);
	  
	  friend Symbol def(Symbols&);
	  friend Symbol set(Symbols&);
	  
	  class not_found_error : public std::exception
	  {
	       const char * message;
	  public:
	       not_found_error(const char* msg) { message = msg; }
	       virtual const char* what() const throw()
	       {
		    return message;
	       }
	  };	
     };
     
     Symbol sum(Symbols&);
     Symbol print(Symbols&);
     Symbol concat(Symbols&);
     Symbol def(Symbols&);
     Symbol set(Symbols&);
     Symbol lambda(Symbols&);
}
